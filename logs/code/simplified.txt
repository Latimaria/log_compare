protected DatanodeStorageInfo chooseRandom(numOfReplicas...) /* ID = 0 */ /////////00000000000000////////////////////////////
      
    int numOfAvailableNodes = clusterMap.countNumOfAvailableNodes(scope, excludedNodes);

    while(numOfReplicas > 0 && numOfAvailableNodes > 0) { /* ID = 1 */ //////////111111111111111111111111111////////////////
        DatanodeDescriptor chosenNode = clusterMap.chooseRandom(scope);
          
        if (excludedNodes.add(chosenNode)) { //was not in the excluded list /* ID = 2 */ //////////22222222222222222222//////////////////
            numOfAvailableNodes--;

            int i;
            for(i = 0; i < storages.length; i++) {  /* ID = 3 */ ///////////////333333333333333333333333333////////////////

                final int newExcludedNodes = addIfIsGoodTarget(blkSize);
                if (newExcludedNodes >= 0) {  /* ID = 4 */ //////////////4444444444444444444444/////////////////

                    numOfReplicas--;  /* ID = 5 */ /////////////////////////////////555555555555555555555////////////////////////////////////

                    numOfAvailableNodes -= newExcludedNodes;
                    break; // break out of for (ID = 3)
                }
            }

        }
    }
      
    if (numOfReplicas>0) /* ID = 6 */ { //////////////////66666666666666//////////66666666666666666666666////////////////////////////////////////////

        throw new NotEnoughReplicasException(detail);
    }
    
    return firstChosen;

}

  